"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @since 2016-11-22 14:55
 * @author vivaxy
 */
const log = require("log-util");
const git = require("@vivaxy/git");
const prompt_1 = require("./prompt");
const run_hook_1 = require("./shell/run-hook");
const logger = require("./shell/logger");
const check_needs_push_1 = require("./git/check-needs-push");
const history_1 = require("./messages/history");
function debug(...message) {
    log.debug('gacp:gacp', ...message);
}
function getNow() {
    return new Date().getTime();
}
async function runTasks({ add, push, emoji, editor, cwd, hooks, }) {
    let needsAdd = add;
    let needsCommit = true;
    let needsPush = push;
    let commitMessage = '';
    const gitRoot = await git.getRootPath({ cwd });
    const gitClean = await git.isClean({ cwd: gitRoot });
    debug('gitClean', gitClean);
    needsAdd = needsAdd && !gitClean;
    const hasStagedFiles = (await git.getStagedFiles({ cwd: gitRoot })).length !== 0;
    debug('hasStagedFiles', hasStagedFiles);
    needsCommit = needsAdd || hasStagedFiles;
    // prompt first before performing any actions
    if (needsCommit) {
        commitMessage = await prompt_1.default({ emojiType: emoji, editor });
        debug('commitMessage:', commitMessage);
    }
    if (needsAdd) {
        logger.command('git add .');
        await git.add({ cwd: gitRoot });
    }
    else {
        if (add) {
            log.info('Nothing to add, working tree clean.');
        }
        else {
            log.info('Skipping add.');
        }
    }
    if (needsCommit) {
        await git.commit(commitMessage, { cwd: gitRoot });
    }
    else {
        log.info('Nothing to commit, working tree clean.');
    }
    // If commit success, remove last commit message
    history_1.clearHistory();
    if (!needsAdd && !needsCommit) {
        await git.fetch({ cwd: gitRoot });
        needsPush = needsPush && (await check_needs_push_1.default({ cwd: gitRoot }));
    }
    if (needsPush) {
        await git.push({ cwd: gitRoot, followTags: true, setUpstream: true });
        await run_hook_1.default(hooks.postpush, { cwd: gitRoot });
    }
    else {
        if (push) {
            log.info('Nothing to push, everything up-to-date.');
        }
        else {
            log.info('Skipping push.');
        }
    }
}
async function gacp({ cwd, add, push, emoji, editor, hooks, }) {
    const startTime = getNow();
    await runTasks({ cwd, add, push, emoji, editor, hooks });
    const endTime = getNow();
    log.success(`Done in ${(endTime - startTime) / 1000}s`);
    await history_1.flushHistory();
}
exports.default = gacp;
