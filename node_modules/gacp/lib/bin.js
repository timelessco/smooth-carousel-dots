#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @since 2016-11-22 13:29
 * @author vivaxy
 */
const yargs = require("yargs");
const chalk = require("chalk");
const log = require("log-util");
const cosmiconfig_1 = require("cosmiconfig");
const updateNotifier = require("update-notifier");
const gacp_1 = require("./gacp");
const history_1 = require("./messages/history");
const pkg = require('../package.json');
function debug(...message) {
    log.debug('gacp:bin', ...message);
}
async function configureYargs() {
    const explorer = cosmiconfig_1.cosmiconfig(pkg.name);
    const cosmiconfigResult = await explorer.search();
    const { config = {} } = cosmiconfigResult || {};
    yargs
        .options({
        add: {
            type: 'boolean',
            desc: 'run git add .',
            default: true,
        },
        push: {
            type: 'boolean',
            desc: 'run git push',
            default: true,
        },
        emoji: {
            type: 'string',
            desc: 'use emoji or code',
            choices: ['code', 'emoji'],
            default: 'code',
        },
        editor: {
            type: 'boolean',
            desc: 'use node external editor in longer description',
            default: false,
        },
        logLevel: {
            type: 'number',
            desc: 'log level',
            default: 1,
        },
        cwd: {
            type: 'string',
            desc: 'working directory',
            default: process.cwd(),
        },
    })
        .config(config)
        .help()
        .version().argv._;
    const hooks = config.hooks || {};
    return {
        hooks: {
            postpush: hooks.postpush || '',
        },
    };
}
function notifyUpdate() {
    const notifier = updateNotifier({ pkg });
    const { update } = notifier;
    if (update) {
        const installCommand = `npm i -g ${update.name}`;
        const message = 'Update available ' +
            chalk.dim(update.current) +
            chalk.reset(' â†’ ') +
            chalk.green(update.latest) +
            ' \nRun ' +
            chalk.cyan(installCommand) +
            ' to update';
        notifier.notify({ message });
    }
}
(async function () {
    try {
        notifyUpdate();
        const extraConfigs = await configureYargs();
        const { logLevel, cwd, emoji, add, push, editor } = yargs.argv;
        log.setLevel(logLevel);
        await gacp_1.default({
            cwd: cwd,
            add: add,
            push: push,
            emoji: emoji,
            editor: editor,
            hooks: {
                postpush: extraConfigs.hooks.postpush,
            },
        });
    }
    catch (e) {
        log.error(e.message);
        log.debug(e.stack);
        await history_1.flushHistory();
        process.exit(1);
    }
})();
