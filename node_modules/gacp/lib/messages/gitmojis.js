"use strict";
/**
 * @since 2017-02-04 16:59
 * @author vivaxy
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGitmojisStat = exports.getGitmojis = void 0;
const configManager = require("./gitmoji-config-manager");
// from https://github.com/carloscuesta/gitmoji/blob/master/src/data/gitmojis.json
const gitmojis_1 = require("../configs/gitmojis");
function mapConfigWithStat(config, statConfig = { gitmojis: [] }) {
    const gitmojisWithStat = statConfig.gitmojis;
    return {
        gitmojis: config.gitmojis.map((item) => {
            const findGitmojiWithStat = gitmojisWithStat.find((gitmoji) => {
                return gitmoji.code === item.code;
            });
            const stat = findGitmojiWithStat ? findGitmojiWithStat.stat : 0;
            return { ...item, stat };
        }),
    };
}
const hasNewGitmoji = () => {
    const { gitmojis } = configManager.read();
    return gitmojis_1.default.gitmojis.length !== gitmojis.length;
};
const addNewGitmoji = async () => {
    const currentConfig = configManager.read();
    await configManager.write(mapConfigWithStat(gitmojis_1.default, currentConfig));
};
const ensureGitmojiConfig = async () => {
    if (!(await configManager.exist())) {
        // map config with `stat: 0`
        await configManager.write(mapConfigWithStat(gitmojis_1.default));
    }
    if (hasNewGitmoji()) {
        await addNewGitmoji();
    }
};
async function getGitmojis({ emojiType }) {
    await ensureGitmojiConfig();
    const gitmojis = await configManager.readListByStatOrder();
    const gitmojiList = gitmojis.map((gitmoji) => {
        return {
            title: `${gitmoji.emoji}  - ${gitmoji.description}`,
            value: gitmoji[emojiType] || gitmoji.code,
        };
    });
    gitmojiList.unshift({ title: 'none', value: '' });
    return gitmojiList;
}
exports.getGitmojis = getGitmojis;
async function updateGitmojisStat({ key, value, }) {
    const { gitmojis: originalGitmojis } = configManager.read();
    const gitmojis = originalGitmojis.map((gitmoji) => {
        if (gitmoji[key] === value) {
            return { ...gitmoji, stat: gitmoji.stat + 1 };
        }
        return gitmoji;
    });
    await configManager.write({ gitmojis });
}
exports.updateGitmojisStat = updateGitmojisStat;
