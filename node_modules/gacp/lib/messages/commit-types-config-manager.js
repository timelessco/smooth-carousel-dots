"use strict";
/**
 * @since 2016-11-17 11:36
 * @author vivaxy
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.readListByStatOrder = exports.exist = exports.write = exports.read = void 0;
const path = require("path");
const fse = require("fs-extra");
// @ts-ignore
const rightPad = require("right-pad");
const file_exists_1 = require("../files/file-exists");
const configs_1 = require("../configs");
const { GACPHOME, COMMIT_TYPES_CONFIG_FILE_NAME } = configs_1.PATHS;
const userConfigFile = path.join(GACPHOME, COMMIT_TYPES_CONFIG_FILE_NAME);
function read() {
    return require(userConfigFile);
}
exports.read = read;
async function write(json) {
    return await fse.outputFile(userConfigFile, JSON.stringify(json, null, 2));
}
exports.write = write;
async function exist() {
    return await file_exists_1.default(userConfigFile);
}
exports.exist = exist;
const formatTypeChoices = (map) => {
    const keys = Object.keys(map);
    const length = keys.reduce((len, item) => {
        if (item.length > len) {
            return item.length;
        }
        return len;
    }, 0);
    return keys.map((key) => {
        return {
            title: `${rightPad(`${key}:`, length)} ${map[key].description}`,
            value: key,
            stat: map[key].stat,
        };
    });
};
function readListByStatOrder() {
    const userConfig = exports.read();
    const configMap = userConfig.types;
    const configList = formatTypeChoices(configMap);
    configList.sort((prev, next) => {
        return next.stat - prev.stat;
    });
    return configList;
}
exports.readListByStatOrder = readListByStatOrder;
