"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTypesStat = exports.getCommitTypes = void 0;
/**
 * @since 2017-02-04 16:59
 * @author vivaxy
 */
const configManager = require("./commit-types-config-manager");
const defaultConfig = require('conventional-commit-types');
/**
 *  {
 *      types: {
 *          // ...
 *      }
 *  }
 * @param config - use config info
 * @param statConfig - use stat info
 * @returns {{types}}
 */
function mapConfigWithStat(config, statConfig = { types: {} }) {
    const typesWithStat = statConfig.types;
    const resultTypes = {};
    Object.keys(config.types).forEach((typeKey) => {
        const typeInfo = config.types[typeKey];
        const typeInfoWithStat = typesWithStat[typeKey];
        resultTypes[typeKey] = {
            ...typeInfo,
            stat: typeInfoWithStat ? typeInfoWithStat.stat : 0,
        };
    });
    return { types: resultTypes };
}
function hasNewTypes() {
    const { types } = configManager.read();
    return Object.keys(defaultConfig.types).length !== Object.keys(types).length;
}
async function useNewTypesConfig() {
    const currentConfig = configManager.read();
    await configManager.write(mapConfigWithStat(defaultConfig, currentConfig));
}
async function ensureTypesConfig() {
    if (!(await configManager.exist())) {
        // map config with `stat: 0`
        await configManager.write(mapConfigWithStat(defaultConfig));
    }
    if (hasNewTypes()) {
        await useNewTypesConfig();
    }
}
async function getCommitTypes() {
    await ensureTypesConfig();
    const commitTypes = await configManager.readListByStatOrder();
    return commitTypes.map(({ title, value }) => {
        return { title, value };
    });
}
exports.getCommitTypes = getCommitTypes;
async function updateTypesStat(typeKey) {
    const { types } = configManager.read();
    types[typeKey].stat++;
    await configManager.write({ types });
}
exports.updateTypesStat = updateTypesStat;
