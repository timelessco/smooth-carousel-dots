"use strict";
/**
 * @since 15-08-19 16:37
 * @author vivaxy
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = require("ava");
var chalk_1 = require("chalk");
var figures = require("figures");
var logSymbol = require("log-symbols");
var log = require("../index");
var __memo__ = [];
var globalConsoleLog = global.console.log;
ava_1.default.beforeEach(function () {
    global.console.log = function mockConsoleLog() {
        var messages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            messages[_i] = arguments[_i];
        }
        __memo__ = __memo__.concat(messages);
    };
});
ava_1.default.afterEach(function () {
    while (__memo__.length) {
        __memo__.pop();
    }
    global.console.log = globalConsoleLog;
});
ava_1.default('should output debug levels', function (t) {
    log.setLevel(log.levels.debug);
    log.debug('debug', log.levels.debug);
    t.deepEqual(__memo__, [
        chalk_1.default.grey(figures.pointerSmall),
        'debug',
        log.levels.debug,
    ]);
});
ava_1.default('should output info levels', function (t) {
    log.info('info', log.levels.info);
    t.deepEqual(__memo__, [logSymbol.info, 'info', log.levels.info]);
});
ava_1.default('should output success levels', function (t) {
    log.success('success', log.levels.success);
    t.deepEqual(__memo__, [logSymbol.success, 'success', log.levels.success]);
});
ava_1.default('should output warn levels', function (t) {
    log.warn('warn', log.levels.warn);
    t.deepEqual(__memo__, [logSymbol.warning, 'warn', log.levels.warn]);
});
ava_1.default('should output error levels', function (t) {
    log.error('error', log.levels.error);
    t.deepEqual(__memo__, [logSymbol.error, 'error', log.levels.error]);
});
ava_1.default('should follow log level info', function (t) {
    log.setLevel(log.levels.info);
    log.debug();
    log.info();
    log.success();
    log.warn();
    log.error();
    t.deepEqual(__memo__, [
        logSymbol.info,
        logSymbol.success,
        logSymbol.warning,
        logSymbol.error,
    ]);
});
ava_1.default('should follow log level success', function (t) {
    log.setLevel(log.levels.success);
    log.debug();
    log.info();
    log.success();
    log.warn();
    log.error();
    t.deepEqual(__memo__, [
        logSymbol.success,
        logSymbol.warning,
        logSymbol.error,
    ]);
});
ava_1.default('should follow log level warn', function (t) {
    log.setLevel(log.levels.warn);
    log.debug();
    log.info();
    log.success();
    log.warn();
    log.error();
    t.deepEqual(__memo__, [logSymbol.warning, logSymbol.error]);
});
ava_1.default('should follow log level error', function (t) {
    log.setLevel(log.levels.error);
    log.debug();
    log.info();
    log.success();
    log.warn();
    log.error();
    t.deepEqual(__memo__, [logSymbol.error]);
});
