"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @since 2020-02-05 09:41
 * @author vivaxy
 */
const better_execa_1 = require("../helpers/better-execa");
function parseCommits(input) {
    const ret = {};
    const fieldsParsers = {
        message(input) {
            return input;
        },
        hash(input) {
            return input;
        },
        tags(input) {
            const TAG_STARTING = 'tag: ';
            // remove ` (` and `)`
            return input
                .slice(2, -1)
                .split(', ')
                .filter(function (str) {
                return str.startsWith(TAG_STARTING);
            })
                .map(function (str) {
                return str.slice(TAG_STARTING.length);
            });
        },
        date(input) {
            return new Date(input).getTime();
        },
        files(input) {
            // remove `\n` and `\n`
            return input
                .slice(1)
                .split('\n')
                .filter(Boolean)
                .map(function (line) {
                const sec = line.split('\t');
                return {
                    filename: sec[1],
                    diffType: sec[0],
                };
            });
        },
    };
    let contentStartIndex = 0;
    Object.keys(fieldsParsers).forEach(function (key, index, allKeys) {
        if (index === 0) {
            // first key
            const delimiter = `\n-${key}-\n`;
            contentStartIndex = delimiter.length;
        }
        if (allKeys.length - 1 === index) {
            // last key
            // @ts-ignore
            ret[key] = fieldsParsers[key](input.slice(contentStartIndex));
            return;
        }
        const nextKey = allKeys[index + 1];
        const nextDelimiter = `\n-${nextKey}-\n`;
        const nextKeyStartIndex = input.indexOf(nextDelimiter, contentStartIndex);
        // @ts-ignore
        ret[key] = fieldsParsers[key](input.slice(contentStartIndex, nextKeyStartIndex));
        contentStartIndex = nextKeyStartIndex + nextDelimiter.length;
    });
    return ret;
}
async function getCommits({ from = '', to = 'HEAD', paths, noMerges = false, cwd, }) {
    const DELIMETER = '------------------------@vivaxy/git/getCommits------------------------';
    const args = [
        'log',
        `--format=${DELIMETER}%n-message-%n%B%n-hash-%n%H%n-tags-%n%d%n-date-%n%ci%n-files-`,
        '--name-status',
    ];
    args.push([from, to].filter(Boolean).join('..'));
    if (paths && paths.length) {
        args.push('--', ...paths);
    }
    if (noMerges) {
        args.push('--no-merges');
    }
    const ret = [];
    try {
        const { exitCode, stdout } = await better_execa_1.default('git', args, {
            cwd,
        });
        if (exitCode === 0) {
            return stdout
                .split(DELIMETER)
                .filter(Boolean)
                .map(parseCommits);
        }
    }
    catch (e) { }
    return ret;
}
exports.default = getCommits;
